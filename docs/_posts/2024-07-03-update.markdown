---
layout: post
title:  "Resources"
date:   2024-07-03
categories: daily log
---

### Resources
- Virtual memory 
    - chapter 9 of Computer Systems: A programmer's perspective which talks about Virtual Memory

- [C# beginner's playlist](https://www.youtube.com/playlist?list=PLdo4fOcmZ0oULFjxrOagaERVAMbmG20Xe)
    - covers basic types, branching, loops, generic collections(list & arrays), LINQ, OO programming
    ```
        Console.WriteLine("Hello, Csharp!");

        string first = "    Sage    ";
        string second = "David";
        // string interpolation using $
        string friends = $"My friends are {first.Trim()} and {second}";
        Console.WriteLine(friends);
        Console.WriteLine(friends.Replace("Sage", "Damian"));
        Console.WriteLine(friends.Contains("Sage"));
        Console.WriteLine(friends.Length);

        long a = 2100000000;
        int b = 2100000000;
        Console.WriteLine(checked(a + b));

        int counter = 0;
        while (counter < 5)
        {
            Console.WriteLine(counter);
            counter++;
        }

        int length = friends.Length;
        for (int i = 0; i < length; i++)
        {
            Console.Write(i);

        }

        Console.WriteLine();

        var names = new List<string> { "scott", "Ana", "Felipe"};
        names.Add("David");
        foreach (var name in names[1..3]) {
            Console.WriteLine($"Hello {name.ToUpper()}");
        }
        Console.WriteLine(names[0]);
        Console.WriteLine(names[^1]);

        names.Sort();

        var arrNames = new string[] {"Manoj", "Mohan"};
        arrNames = [..arrNames, "Kumar"];
        foreach (var an in arrNames) {
            Console.WriteLine(an);
        }

        var numbers = new List<int> {45, 55, 99, 48};
        numbers.Sort();
        Console.WriteLine(numbers.IndexOf(99));

        List<int> scores = [97, 92, 81, 60];

        IEnumerable<string> scoreQuery = from score in scores
                                    where score > 80
                                    orderby score ascending
                                    select $"The score is {score}";

        Console.WriteLine(scoreQuery.Count());

        foreach (var s in scoreQuery) {
            Console.WriteLine(s);
        }
        var scoreList = scoreQuery.ToList();
        Console.WriteLine($"length of list is {scoreList.Count}");


        // method syntax for LINQ
        IEnumerable<int> scoreQuery2 = scores.Where(s => s > 80).OrderByDescending(s => s);
        foreach (var s in scoreQuery2) {
            Console.WriteLine(s);
        }

        var p1 = new Person("Manoj", "Mohan", new DateOnly(1970, 1, 1));
        var p2 = new Person("Manoj", "Rao", new DateOnly(2000, 1, 1));

        p1.pets.Add(new Dog("Spikie"));
        p2.pets.Add(new Dog("spikie"));
        p2.pets.Add(new Cat("persian"));

        List<Person> people = [p1, p2];

        foreach (var person in people) {
            Console.WriteLine($"{person}");
            foreach (var pet in person.pets) {
                Console.WriteLine($"      {pet}");
            }
        }

        Console.WriteLine($"{p2.First}'s birthday is on {p2.Birthday}");
        public class Person(string firstname, string lastname, DateOnly birthday) {
            public string First {get; } = firstname;
            public string Last {get; } = lastname;
            public DateOnly Birthday {get; } = birthday;

            public List<Pet> pets {get; } = new();

            public override string ToString()
            {
                return $"Human {First} {Last}";
            }
        }

        public abstract class Pet(string firstname) {
            public string First {get;} = firstname;

            public abstract string MakeNoise();

            public override string ToString()
            {
                return $"{First} and I'm a {GetType().Name} and I {MakeNoise()}";
            }
        }

        public class Cat(string firstname) : Pet(firstname) {
            public override string MakeNoise() => "meow";
        }
        public class Dog(string firstname) : Pet(firstname) {
            public override string MakeNoise() => "bark";
        }
    ```
